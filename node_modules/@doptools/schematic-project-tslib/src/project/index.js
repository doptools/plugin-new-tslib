"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const schematic_project_base_1 = require("@doptools/schematic-project-base");
const schematic_project_base_2 = require("@doptools/schematic-project-base");
const versions_json_1 = __importDefault(require("../versions.json"));
function default_1(options) {
    const baseOptions = {
        name: options.name,
        description: options.description,
        private: options.private,
        repository: options.repository
    };
    const partials = schematics_1.apply(schematics_1.url("./files.partial"), [
        schematics_1.template({
            dot: ".",
            versions: versions_json_1.default
        }),
        schematics_1.renameTemplateFiles()
    ]);
    return schematics_1.chain([
        schematics_1.mergeWith(schematics_1.apply(schematics_1.empty(), [
            schematics_1.externalSchematic("@doptools/schematic-project-base", "project", baseOptions),
        ])),
        schematics_1.mergeWith(schematics_1.apply(schematics_1.url("./files"), [
            schematics_1.template({
                dot: ".",
                versions: versions_json_1.default
            }),
            schematics_1.renameTemplateFiles()
        ])),
        (host, context) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const tplFiles = yield partials(context).toPromise();
            const hostEditorConfig = schematic_project_base_2.EditorConfig.parse((_a = host.read('.editorconfig')) === null || _a === void 0 ? void 0 : _a.toString('utf-8'));
            const tsEditorConfig = schematic_project_base_2.EditorConfig.parse((_b = tplFiles.read('.editorconfig')) === null || _b === void 0 ? void 0 : _b.toString('utf-8'));
            const newEditorConfig = Object.assign(Object.assign({}, hostEditorConfig), tsEditorConfig);
            const newEcStr = schematic_project_base_2.EditorConfig.stringify(newEditorConfig);
            host.overwrite('.editorconfig', newEcStr);
        }),
        (host, context) => __awaiter(this, void 0, void 0, function* () {
            var _c, _d;
            const tplFiles = yield partials(context).toPromise();
            const hostPkg = (_c = host.read('package.json')) === null || _c === void 0 ? void 0 : _c.toString('utf-8');
            const tplPkg = (_d = tplFiles.read('package.json')) === null || _d === void 0 ? void 0 : _d.toString('utf-8');
            const merged = schematic_project_base_1.PackageJsonUtil.merge(hostPkg, tplPkg);
            host.overwrite('package.json', merged);
        })
    ]);
}
exports.default = default_1;
//# sourceMappingURL=index.js.map