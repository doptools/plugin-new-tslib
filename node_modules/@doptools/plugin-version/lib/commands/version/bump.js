"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const tslib_cli_core_1 = require("@doptools/tslib-cli-core");
const semver_1 = tslib_1.__importDefault(require("semver"));
const VersionCommand_1 = require("./VersionCommand");
let VersionBump = class VersionBump extends VersionCommand_1.VersionCommand {
    async run() {
        var _a;
        const pkg = await new tslib_cli_core_1.PackageJsonFile('package.json').loadFile();
        const currentVersion = semver_1.default.parse(pkg.version);
        const nextVersion = (_a = semver_1.default.parse(pkg.version)) === null || _a === void 0 ? void 0 : _a.inc(this.versionPart);
        this.log(`Bumping ${this.versionPart} from ${currentVersion.version} to ${nextVersion.version}. dryRun? ${this.dryRun}`);
    }
};
tslib_1.__decorate([
    tslib_cli_core_1.CliArgument({
        description: 'Which part of the semver to bump',
        options: ['major', 'premajor', 'minor', 'preminor', 'patch', 'prepatch', 'prerelease'],
        required: true
    }),
    tslib_1.__metadata("design:type", String)
], VersionBump.prototype, "versionPart", void 0);
tslib_1.__decorate([
    tslib_cli_core_1.FlagBoolean(),
    tslib_1.__metadata("design:type", Boolean)
], VersionBump.prototype, "dryRun", void 0);
VersionBump = tslib_1.__decorate([
    tslib_cli_core_1.CliCommand({
        description: 'Bump the version of a project'
    })
], VersionBump);
exports.default = VersionBump;
