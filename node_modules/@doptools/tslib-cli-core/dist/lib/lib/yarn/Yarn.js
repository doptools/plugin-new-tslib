"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Yarn = void 0;
const shell_1 = require("../shell");
function cmd(command, args = [], flags = {}) {
    var _a;
    let cmd = `yarn ${command}`;
    for (const key in flags) {
        if (Object.prototype.hasOwnProperty.call(flags, key)) {
            let value = flags[key];
            if (typeof value === 'boolean') {
                if (value === true) {
                    cmd += ` --${key}`;
                }
            }
            else if (typeof value === 'number') {
                cmd += ` --${key}=${value.toString()}`;
            }
            else {
                cmd += ` --${key}="${(_a = value === null || value === void 0 ? void 0 : value.toString()) !== null && _a !== void 0 ? _a : ''}"`;
            }
        }
    }
    cmd += args.length ? ' ' + args.join(' ') : '';
    return cmd;
}
/**
 * Partial nodejs wrapper for Yarn cli
 * @link https://yarnpkg.com/cli
 */
class Yarn {
    /**
     * Install the project dependencies.
     * @param options yarn install options
     * @link https://yarnpkg.com/cli/install
     */
    static install(options = {}) {
        var _a, _b, _c, _d, _e, _f;
        return shell_1.Shell.exec(cmd('install', [], {
            'json': (_a = options.json) !== null && _a !== void 0 ? _a : false,
            'immutable': (_b = options.immutable) !== null && _b !== void 0 ? _b : false,
            'immutable-cache': (_c = options.immutableCache) !== null && _c !== void 0 ? _c : false,
            'check-cache': (_d = options.checkCache) !== null && _d !== void 0 ? _d : false,
            'inline-builds': (_e = options.inlineBuilds) !== null && _e !== void 0 ? _e : false,
            'skip-builds': (_f = options.skipBuilds) !== null && _f !== void 0 ? _f : false
        }), { cwd: options.cwd });
    }
    /**
     * Add dependencies to the project.
     * @param packages one or more packages to add
     * @param options yarn add options
     * @link https://yarnpkg.com/cli/add
     */
    static add(packages, options = {}) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        return shell_1.Shell.exec(cmd('add', Array.isArray(packages) ? packages : [packages], {
            'json': (_a = options.json) !== null && _a !== void 0 ? _a : false,
            'exact': (_b = options.exact) !== null && _b !== void 0 ? _b : false,
            'tilde': (_c = options.tilde) !== null && _c !== void 0 ? _c : false,
            'caret': (_d = options.caret) !== null && _d !== void 0 ? _d : false,
            'dev': (_e = options.dev) !== null && _e !== void 0 ? _e : false,
            'peer': (_f = options.peer) !== null && _f !== void 0 ? _f : false,
            'optional': (_g = options.optional) !== null && _g !== void 0 ? _g : false,
            'prefer-dev': (_h = options.preferDev) !== null && _h !== void 0 ? _h : false,
            'interactive': (_j = options.interactive) !== null && _j !== void 0 ? _j : false,
            'cached': (_k = options.cached) !== null && _k !== void 0 ? _k : false,
        }), { cwd: options.cwd });
    }
    /**
     * Remove dependencies from the project.
     * @param packages one or more packages to remove
     * @param options yarn remove options
     * @link https://yarnpkg.com/cli/remove
     */
    static remove(packages, options = {}) {
        var _a;
        return shell_1.Shell.exec(cmd('remove', Array.isArray(packages) ? packages : [packages], {
            'all': (_a = options.all) !== null && _a !== void 0 ? _a : false,
        }), { cwd: options.cwd });
    }
    /**
     * Run a script defined in the package.json.
     * @param script the script to run
     * @param options yarn run options
     * @link https://yarnpkg.com/cli/run
     */
    static run(script, options = {}) {
        var _a, _b;
        return shell_1.Shell.exec(cmd('run', [script], {
            'inspect': (_a = options.inspect) !== null && _a !== void 0 ? _a : false,
            'inspect-brk': (_b = options.inspectBrk) !== null && _b !== void 0 ? _b : false,
        }), { cwd: options.cwd });
    }
}
exports.Yarn = Yarn;
//# sourceMappingURL=Yarn.js.map