"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonFileType = exports.JsonFile = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const jsonc_1 = require("jsonc");
const path_1 = __importDefault(require("path"));
const promises_1 = require("fs/promises");
const filePath = Symbol.for('the path to the file');
const fileName = Symbol.for('the name of the file');
const tree = Symbol.for('virtual file tree');
class JsonFile {
    constructor(...args) {
        if (args.length === 1) {
            if (typeof args[0] === 'string') {
                this.setFilePath(args[0]);
            }
            else if (args[0] instanceof schematics_1.HostTree) {
                this[tree] = args[0];
            }
            else {
                this.__applyData(args[0], this);
            }
        }
        else if (args.length === 2) {
            if (typeof args[0] === 'string') {
                this.setFilePath(args[0]);
                this.__applyData(args[1], this);
            }
            else if (typeof args[1] === 'string') {
                this[tree] = args[0];
                this.setFilePath(args[1]);
            }
            else {
                this[tree] = args[0];
                this.__applyData(args[1], this);
            }
        }
        else if (args.length === 3) {
            this[tree] = args[0];
            this.setFilePath(args[1]);
            this.__applyData(args[2], this);
        }
    }
    async loadFile() {
        var _a;
        if (!this.__hasFilePath) {
            throw new Error('Cannot load file with no path');
        }
        let dataStr;
        if (this[tree]) {
            dataStr = (_a = this[tree].read(this.getFilePath())) === null || _a === void 0 ? void 0 : _a.toString('utf-8');
        }
        else {
            dataStr = await promises_1.readFile(this.getFilePath(), { encoding: 'utf-8' });
        }
        if (dataStr) {
            const json = await jsonc_1.jsonc.parse(dataStr, { stripComments: true });
            this.__applyData(json, this);
        }
        return this;
    }
    loadFileFrom(file) {
        this.setFilePath(file);
        return this.loadFile();
    }
    async saveFile() {
        const filename = this[filePath];
        if (!filename) {
            throw new Error('Cannot save without path');
        }
        const data = {};
        this.__applyData(this, data);
        const p = this.getFilePath();
        const dataStr = jsonc_1.jsonc.stringify(data, { space: 2 });
        if (this[tree]) {
            if (this[tree].exists(p)) {
                this[tree].overwrite(p, dataStr);
            }
            else {
                this[tree].create(p, dataStr);
            }
        }
        else {
            await promises_1.mkdir(path_1.default.dirname(p), { recursive: true });
            await promises_1.writeFile(p, dataStr, { encoding: 'utf-8' });
        }
    }
    saveFileAs(file) {
        const copy = this.clone();
        copy.setFilePath(file);
        return copy;
    }
    clone() {
        const copy = new (this.constructor());
        copy[fileName] = this[fileName];
        copy[filePath] = this[filePath];
        this.__applyData(this, copy);
        return copy;
    }
    toJSON() {
        return this.__applyData(this, {});
    }
    toString() {
        return jsonc_1.jsonc.stringify(this, { space: 2 });
    }
    setFilePath(file) {
        var _a;
        this[filePath] = (_a = path_1.default.dirname(file)) !== null && _a !== void 0 ? _a : '.';
        this[fileName] = path_1.default.basename(file);
    }
    getFilePath() {
        return path_1.default.join(this[filePath], this[fileName]);
    }
    get __hasFilePath() {
        return !!this[filePath];
    }
    __applyData(from, to) {
        return Object.assign(to, from);
    }
}
exports.JsonFile = JsonFile;
function JsonFileType() {
    return JsonFile;
}
exports.JsonFileType = JsonFileType;
//# sourceMappingURL=JsonFile.js.map