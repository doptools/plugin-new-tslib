"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.uninstallPlugin = exports.installPlugin = exports.writeCliPackageJson = exports.readCliPackageJson = exports.PATH_CLI = exports.PATH_CLI_PACKAGEJSON = exports.PATH_CLI_BIN = void 0;
const tslib_1 = require("tslib");
const tslib_cli_core_1 = require("@doptools/tslib-cli-core");
const rest_1 = require("@octokit/rest");
const fs_1 = require("fs");
const http_1 = tslib_1.__importDefault(require("http"));
const jsonc_1 = require("jsonc");
const npm_package_arg_1 = tslib_1.__importDefault(require("npm-package-arg"));
const path_1 = tslib_1.__importDefault(require("path"));
const resolve_package_path_1 = tslib_1.__importStar(require("resolve-package-path"));
const DefaultPluginInstallOptions = {
    force: false,
    verbose: false,
};
async function resolvePackageInfo(plugin) {
    const result = npm_package_arg_1.default(plugin);
    switch (result.type) {
        case 'version':
        case 'tag':
            break;
        case 'directory':
            const pluginPkg = await jsonc_1.jsonc.read(path_1.default.join(result.fetchSpec, 'package.json'));
            addPackageInfo(result, pluginPkg);
            break;
        case 'git':
            await resolvePackageInfoFromGit(plugin, result);
            break;
        default:
            console.warn('unsuported:', result);
            return null;
    }
    return result;
}
function addPackageInfo(result, pkg) {
    result.name = pkg.name;
    result.escapedName = escape(result.name);
    if (result.name.startsWith('@')) {
        result.scope = result.name.split('/', 2)[0];
    }
}
async function resolvePackageInfoFromGit(plugin, info) {
    var _a;
    switch (info.hosted.type) {
        case 'github':
            const gh = info.hosted;
            const api = new rest_1.Octokit();
            (_a = info.gitCommittish) !== null && _a !== void 0 ? _a : (info.gitCommittish = (await api.repos.get({ owner: gh.user, repo: gh.project })).data.default_branch);
            const fileinfo = await api.repos.getContent({
                owner: gh.user,
                repo: gh.project,
                ref: info.gitCommittish,
                path: 'package.json'
            });
            let pkgContent = '';
            if (!fileinfo.data.content) {
                const res = await new Promise(resolve => {
                    http_1.default.get(fileinfo.data.download_url, resolve);
                });
                let data = await new Promise((resolve, reject) => {
                    let data = '';
                    res.on('data', chunk => data += chunk);
                    res.on('error', err => reject(err));
                    res.on('end', () => resolve(data));
                });
                pkgContent = jsonc_1.jsonc.parse(data);
            }
            else {
                const content = fileinfo.data.content;
                pkgContent = Buffer.from(content, 'base64').toString('utf-8');
            }
            const pkg = jsonc_1.jsonc.parse(pkgContent, { stripComments: true });
            addPackageInfo(info, pkg);
            break;
        default:
            throw new Error(`unsupported git host ${info.hosted.type}`);
    }
}
exports.PATH_CLI_BIN = path_1.default.dirname(fs_1.realpathSync(process.argv[1]));
exports.PATH_CLI_PACKAGEJSON = resolve_package_path_1.findUpPackagePath(exports.PATH_CLI_BIN);
exports.PATH_CLI = path_1.default.dirname(exports.PATH_CLI_PACKAGEJSON);
async function readCliPackageJson() {
    return await jsonc_1.jsonc.read(exports.PATH_CLI_PACKAGEJSON);
}
exports.readCliPackageJson = readCliPackageJson;
async function writeCliPackageJson(data) {
    return await jsonc_1.jsonc.write(exports.PATH_CLI_PACKAGEJSON, data, { space: 2 });
}
exports.writeCliPackageJson = writeCliPackageJson;
async function installPlugin(config, plugin, opts = {}) {
    var _a, _b, _c;
    var _d;
    const pluginSource = await resolvePackageInfo(plugin);
    if (pluginSource === null) {
        throw new Error(`Usupported plugin source: '${plugin}'`);
    }
    const pluginName = pluginSource.name;
    const pluginSpec = {
        type: 'user',
        name: pluginName,
        url: pluginSource.raw,
        tag: (_a = pluginSource.gitCommittish) !== null && _a !== void 0 ? _a : pluginSource.fetchSpec
    };
    if (process.env.GLOBAL_CLI !== 'true') {
        const localPkgPath = path_1.default.join(process.cwd(), 'package.json');
        const localPkg = await jsonc_1.jsonc.read(localPkgPath, { stripComments: true });
        (_b = localPkg.dops) !== null && _b !== void 0 ? _b : (localPkg.dops = {});
        (_c = (_d = localPkg.dops).plugins) !== null && _c !== void 0 ? _c : (_d.plugins = []);
        const index = localPkg.dops.plugins.findIndex(p => pluginName === p.name);
        if (index === -1) {
            localPkg.dops.plugins.push(pluginSpec);
        }
        else {
            localPkg.dops.plugins.splice(index, 1, pluginSpec);
        }
        await jsonc_1.jsonc.write(localPkgPath, localPkg, { space: 2 });
    }
    await installPluginSpec(pluginSpec);
}
exports.installPlugin = installPlugin;
async function installPluginSpec(pluginSpec) {
    var _a;
    var _b;
    const plugin = pluginSpec.url;
    const pluginName = pluginSpec.name;
    const installed = !!resolve_package_path_1.default(pluginName, exports.PATH_CLI);
    let code;
    if (code = tslib_cli_core_1.Yarn.add(plugin, { cwd: exports.PATH_CLI })) {
        throw new Error(`Could not add package '${plugin}'. Yarn exited with code: ${code}`);
    }
    const pluginPkgPath = resolve_package_path_1.default(pluginName, exports.PATH_CLI, false);
    const pluginPkg = await jsonc_1.jsonc.read(pluginPkgPath);
    if (!pluginPkg.oclif) {
        if (!installed) {
            tslib_cli_core_1.Yarn.remove(plugin, { cwd: exports.PATH_CLI });
        }
        throw new Error(`'${plugin} is not a valid plugin`);
    }
    const cliPackage = await readCliPackageJson();
    (_a = (_b = cliPackage.oclif).plugins) !== null && _a !== void 0 ? _a : (_b.plugins = []);
    const plugins = cliPackage.oclif.plugins;
    const index = plugins.findIndex(p => typeof p === 'string' ? pluginName === p : pluginName === p.name);
    if (index === -1) {
        plugins.push(pluginSpec);
    }
    else {
        if (typeof plugins[index] !== 'string') {
            plugins.splice(index, 1, pluginSpec);
        }
    }
    await writeCliPackageJson(cliPackage);
}
async function uninstallPlugin(config, plugin, opts = {}) {
    var _a;
    var _b;
    const cliPackage = await readCliPackageJson();
    (_a = (_b = cliPackage.oclif).plugins) !== null && _a !== void 0 ? _a : (_b.plugins = []);
    const plugins = cliPackage.oclif.plugins;
    const index = plugins.findIndex(p => typeof p === 'string' ? plugin === p : plugin === p.name);
    if (index !== -1) {
        plugins.splice(index, 1);
    }
    await writeCliPackageJson(cliPackage);
    tslib_cli_core_1.Yarn.remove(plugin, { cwd: exports.PATH_CLI });
}
exports.uninstallPlugin = uninstallPlugin;
//# sourceMappingURL=data:application/json;base64,